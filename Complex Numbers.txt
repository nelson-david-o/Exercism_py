import math
def convert_to_complex(other):
    if not isinstance(other, ComplexNumber):
        new_other = other
        other = ComplexNumber(new_other)
    return other
class ComplexNumber:
    def __init__(self, real, imaginary=0):
        self.real = real
        self.imaginary = imaginary
    def __eq__(self, other):
        other = convert_to_complex(other)
        return self.real == other.real and self.imaginary == other.imaginary
    def __add__(self, other):
        other = convert_to_complex(other)
        new_real = self.real + other.real
        new_imaginary = self.imaginary + other.imaginary
        return ComplexNumber(new_real, new_imaginary)
    def __radd__(self, other):
        return self.__add__(other)
    def __mul__(self, other):
        other = convert_to_complex(other)
        new_real = self.real * other.real - self.imaginary * other.imaginary
        new_imaginary = self.imaginary * other.real + self.real * other.imaginary
        return ComplexNumber(new_real, new_imaginary)
    def __rmul__(self, other):
        return self.__mul__(other)
    def __sub__(self, other):
        other = convert_to_complex(other)
        new_real = self.real - other.real
        new_imaginary = self.imaginary - other.imaginary
        return ComplexNumber(new_real, new_imaginary)
    def __rsub__(self, other):
        other = convert_to_complex(other)
        new_real = - (self.real - other.real)
        new_imaginary = - (self.imaginary - other.imaginary)
        return ComplexNumber(new_real, new_imaginary)
    def __truediv__(self, other):
        other = convert_to_complex(other)
        new_real = (self.real * other.real + self.imaginary * other.imaginary) / \
                   (other.real ** 2 + other.imaginary ** 2)
        new_imaginary = (self.imaginary * other.real - self.real * other.imaginary) / \
                        (other.real ** 2 + other.imaginary ** 2)
        return ComplexNumber(new_real, new_imaginary)
    def __rtruediv__(self, other):
        other = convert_to_complex(other)
        new_real = (self.real * other.real + self.imaginary * other.imaginary) / \
                   (self.real ** 2 + self.imaginary ** 2)
        new_imaginary = (- self.imaginary * other.real + self.real * other.imaginary) / \
                        (self.real ** 2 + self.imaginary ** 2)
        return ComplexNumber(new_real, new_imaginary)
    def __abs__(self):
        return math.sqrt(self.real ** 2 + self.imaginary ** 2)
    def conjugate(self):
        new_imaginary = - self.imaginary
        return ComplexNumber(self.real, new_imaginary)
    def exp(self):
        new_real = math.exp(self.real) * math.cos(self.imaginary)
        new_imaginary = int(math.exp(self.real) * math.sin(self.imaginary))
        return ComplexNumber(new_real, new_imaginary)
